using AutomaticCodeGenerator.Class.DAL;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AutomaticCodeGenerator.Class.BLL
{
    /// <summary>
    /// Automatic Code Generator
    /// Developed by: Abdullah Al-Muzahid
    /// </summary>
    /// 
    public class FileOperationManager:IDisposable
    {
        private FileOperationProvider provider;
        private DataGridView grdColumns;
        private string project;
        private string table;
        private string namespaces;
        private string exceptionbody;


        public FileOperationManager(DataGridView grdColumns, string project, string table)
        {
            provider = new FileOperationProvider();
            this.grdColumns = grdColumns;
            this.project = project;
            this.table = table;
            this.namespaces = " using System; \n using System.Data; \n using System.Data.SqlClient; \n using System.Configuration; \n using System.Collections; \n using System.Collections.Generic; \n "
                          + "using System.Linq; \n using System.Web; \n using System.Web.Security; \n using System.Web.UI; \n "
                          + "using System.Web.UI.HtmlControls; \n using System.Web.UI.WebControls; \n using System.Web.UI.WebControls.WebParts; \n "
                          + "using System.Xml.Linq; \n \n \n";
            this.exceptionbody = "catch (Exception Ex) \n"
                            + "{  \n"
                            + "ErrorManager errL = new ErrorManager(); \n"
                            + "errL.WriteError(\"\", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString()); \n"
                            + "} \n";
        }


        public bool createProjectTemplate()
        {
            return provider.createProjectTemplate(this.project);
        }

        public List<Entity> extractERDDiagram(string path, out string message)
        {
            return provider.extractERDDiagram(path, out message);
        }

        public bool createPropertyClass(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = namespaces
                        + "\n\n"
                        + "/************************************************************************************\n"
                        + "* Class : " + table + "\n"
                        + "* Author: Abdullah Al-Muzahid, Agradut IT        \n"
                        + "* Generated On: " + DateTime.Now.ToString() + " \n"
                        + "* Generated By: Agradut Code Generator (V 1.0.0.0)\n"
                        + "* Description:	This calss is automatically generated by Code Gnerator\n"
                        + "* It is used to define the properties of " + table + "object\n"
                        + "* **********************************************************************************/\n"
                        + "\n\n\n"
                        + "public class " + table + ":CommonEntity \n{\n";


                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;

                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        if (dr.Cells[1].Value.ToString() == "varchar" || dr.Cells[1].Value.ToString() == "nvarchar" || dr.Cells[1].Value.ToString() == "ntext")
                        {
                            pc += "private string " + dr.Cells[0].Value.ToString().ToLower() + ";\n ";
                        }
                        else
                        {
                            pc += "private " + dr.Cells[1].Value.ToString() + " " + dr.Cells[0].Value.ToString().ToLower() + "; \n";
                        }
                    }
                }

                pc += "\n\n\n";
                pc += "public " + table + "() \n { \n";

                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;

                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        if (dr.Cells[1].Value.ToString() == "DateTime")
                        {
                            pc += dr.Cells[0].Value.ToString().ToLower() + " = " + " DateTime.Now;\n ";
                        }
                        else if (dr.Cells[1].Value.ToString() == "int" || dr.Cells[1].Value.ToString() == "float")
                        {
                            pc += dr.Cells[0].Value.ToString().ToLower() + " = " + " 0;\n ";
                        }
                        else
                        {
                            pc += dr.Cells[0].Value.ToString().ToLower() + " = " + " \"\"; \n ";
                        }
                    }
                }


                pc += "}\n\n\n"
                    + "public " + table + "("
                    + "int id, string name, ";

                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;

                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        if (dr.Cells[1].Value.ToString() == "varchar" || dr.Cells[1].Value.ToString() == "nvarchar" || dr.Cells[1].Value.ToString() == "ntext")
                        {
                            pc += " string " + dr.Cells[0].Value.ToString().ToLower() + " ,";
                        }
                        else
                        {
                            pc += " " + dr.Cells[1].Value.ToString() + " " + dr.Cells[0].Value.ToString().ToLower() + " ,";
                        }
                    }
                }


                pc += "char activestatus, string insertedBy, DateTime insertedOn";

                pc += ") \n { \n"
                    + "this.id = id; \n"
                    + "this.name = name; \n";

                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;
                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        pc += "this." + dr.Cells[0].Value.ToString().ToLower() + " = " + dr.Cells[0].Value.ToString().ToLower() + "; \n ";
                    }
                }

                pc += "this.activeStatus = activestatus; \n"
                    + "this.insertedBy = insertedBy; \n"
                    + "this.updatedBy = updatedBy; \n"
                    + "insertedOn = DateTime.Now; \n"
                    + "updatedOn = DateTime.Now; \n";
                pc += "} \n\n\n";
                pc += " #region Properties \n\n";

                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;
                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        if (dr.Cells[1].Value.ToString() == "varchar" || dr.Cells[1].Value.ToString() == "nvarchar" || dr.Cells[1].Value.ToString() == "ntext")
                        {
                            pc += "public string " + dr.Cells[0].Value.ToString() + "\n { \n"
                                + "get \n { \n return " + dr.Cells[0].Value.ToString().ToLower() + "; \n } \n"
                                + "set \n { \n " + dr.Cells[0].Value.ToString().ToLower() + " = value; \n } \n} \n";

                        }
                        else
                        {
                            pc += "public " + dr.Cells[1].Value.ToString() + " " + dr.Cells[0].Value.ToString() + "\n { \n"
                                + "get \n { \n return " + dr.Cells[0].Value.ToString().ToLower() + "; \n } \n"
                                + "set \n { \n " + dr.Cells[0].Value.ToString().ToLower() + " = value; \n } \n} \n";
                        }
                    }
                }

                pc += " \n\n #endregion \n \n }";

                this.provider.createFile(project + "\\App_Code\\BLL\\", table + ".cs", pc);

                return true;
            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message += "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }



        public bool createProviderClass(out string message)
        {
            message = string.Empty;
            try
            {
                string pc = namespaces
                        + "\n\n"
                        + "/************************************************************************************\n"
                        + "* Class : " + table + "Provider \n"
                        + "* Author: Abdullah Al-Muzahid, Agradut IT        \n"
                        + "* Generated On: " + DateTime.Now.ToString() + " \n"
                        + "* Generated By: Agradut Code Generator (V 1.0.0.0)\n"
                        + "* Description:	This calss is automatically generated by Code Gnerator\n"
                        + "* It is used to manupulate the data of " + table + " object\n"
                        + "* **********************************************************************************/\n"
                        + "\n\n\n"
                        + "public class " + table + "Provider : CommonEntityProvider \n{\n\n";



                pc += "\n\n\n";
                pc += "public " + table + "Provider() \n { \n \n";
                pc += "}\n\n\n";

                pc += " #region Methods \n\n";

                pc += "public int save(" + table + " o) \n { \n try \n { \n"
                    + "SqlCommand inscmd = new SqlCommand(\"[dbo].[Proc_InsertUpdate_" + table + "]\", DBCon.Connection);\n"
                    + "inscmd.CommandType = CommandType.StoredProcedure;\n"
                    + "inscmd.Parameters.Add(\"@ID\", SqlDbType.Int).Value = o.ID;\n"
                    + "inscmd.Parameters[\"@ID\"].Direction = ParameterDirection.InputOutput;\n"
                    + "inscmd.Parameters.Add(\"@Name\", SqlDbType.NVarChar, 256).Value = o.Name;\n";

                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;

                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        //if (dr.Cells[1].Value.ToString() == "varchar" || dr.Cells[1].Value.ToString() == "nvarchar" || dr.Cells[1].Value.ToString() == "char")
                        //{
                        //    pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType." + dr.Cells[1].Value.ToString() + ", " + dr.Cells[2].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        //}
                        //else
                        //{
                        //    pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType." + dr.Cells[1].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";
                        //}
                        if (dr.Cells[1].Value.ToString() == "varchar")
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType.VarChar" + ", " + dr.Cells[2].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        }
                        else if (dr.Cells[1].Value.ToString() == "nvarchar")
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType.NVarChar" + ", " + dr.Cells[2].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        }
                        else if (dr.Cells[1].Value.ToString() == "ntext")
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType.NText" + ", " + dr.Cells[2].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        }
                        else if (dr.Cells[1].Value.ToString() == "char")
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType.Char" + ", " + dr.Cells[2].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        }
                        else if (dr.Cells[1].Value.ToString() == "int")
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType.Int" + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        }
                        else if (dr.Cells[1].Value.ToString() == "float")
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType.Float" + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";

                        }
                        else
                        {
                            pc += "inscmd.Parameters.Add(\"@" + dr.Cells[0].Value.ToString() + "\", SqlDbType." + dr.Cells[1].Value.ToString() + ").Value = o." + dr.Cells[0].Value.ToString() + "; \n";
                        }
                    }
                }

                pc += "inscmd.Parameters.Add(\"@ActiveStatus\", SqlDbType.Char, 1).Value = o.ActiveStatus; \n"
                    + "inscmd.Parameters.Add(\"@User\", SqlDbType.VarChar, 50).Value = o.InsertedBy; \n"
                + "if (DBCon.Connection.State != ConnectionState.Open) \n"
                + "DBCon.Connection.Open(); \n"
                + "inscmd.ExecuteNonQuery(); \n"
                + "if (DBCon.Connection.State == ConnectionState.Open) \n"
                + "DBCon.Connection.Close(); \n"
                + "int id = (int)inscmd.Parameters[\"@ID\"].Value; \n"
                + "return id; \n"
                + "} \n"
                + "catch (SqlException sqlEx) \n"
                + "{ \n"
                + "ErrorManager errL = new ErrorManager(); \n"
                + "errL.WriteError(sqlEx.Number.ToString(), sqlEx.Message.ToString(), sqlEx.Source.ToString(), sqlEx.StackTrace.ToString()); \n"
                + "if (DBCon.Connection.State != ConnectionState.Closed) \n"
                + "{ \n"
                + "DBCon.Connection.Close(); \n"
                + "} \n"
                + "return 0; \n"
                + "} \n"
                + "catch (Exception Ex) \n"
                + "{ \n"
                + "ErrorManager errL = new ErrorManager(); \n"
                + "errL.WriteError(\"\", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString()); \n"
                + "if (DBCon.Connection.State != ConnectionState.Closed) \n"
                + "{ \n"
                + "DBCon.Connection.Close(); \n"
                + "} \n"
                + "return 0; \n"
                + "} \n";

                pc += "} \n\n #endregion \n \n }";

                this.provider.createFile(project + "\\App_Code\\DAL\\", table + "Provider.cs", pc);

                return true;
            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message = "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }



        public bool createManagerClass(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = namespaces
                        + "\n\n"
                        + "/************************************************************************************\n"
                        + "* Class : " + table + "Manager \n"
                        + "* Author: Abdullah Al-Muzahid, Agradut IT        \n"
                        + "* Generated On: " + DateTime.Now.ToString() + " \n"
                        + "* Generated By: Agradut Code Generator (V 1.0.0.0)\n"
                        + "* Description:	This calss is automatically generated by Code Gnerator\n"
                        + "* It is used to manupulate the data of " + table + "object\n"
                        + "* **********************************************************************************/\n"
                        + "\n\n\n"
                        + "public class " + table + "Manager \n{\n\n";



                pc += "\n\n\n";
                pc += "public " + table + "Manager() \n { \n \n";
                pc += "}\n\n\n";

                pc += " #region Methods \n\n";

                pc += "public static int save(" + table + " o) \n { \n try \n { \n"
                    + table + "Provider np = new " + table + "Provider(); \n"
                    + "int id = np.save(o); \n"
                    + "return id; \n"
                    + "} \n"
                    + "catch (Exception ex) \n"
                    + "{ \n"
                    + "Utilities.LogError(ex); \n"
                    + "return 0; \n"
                    + "} \n } \n \n";

                pc += "public static " + table + " GetFromReader(IDataReader reader) \n"
                    + "{ \n"
                    + "try \n"
                    + "{ \n"
                    + table + " o = new " + table
                    + "\n( \n"
                    + "(int)reader[\"ID\"], \n"
                    + "reader[\"Name\"].ToString(), \n";

                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;
                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        if (dr.Cells[1].Value.ToString() == "varchar" || dr.Cells[1].Value.ToString() == "nvarchar" || dr.Cells[1].Value.ToString() == "ntext")
                        {
                            pc += "reader[\"" + dr.Cells[0].Value.ToString() + "\"].ToString(), \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "DateTime")
                        {
                            pc += "Convert.ToDateTime(" + "reader[\"" + dr.Cells[0].Value.ToString() + "\"].ToString()), \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "char")
                        {
                            pc += "Convert.ToChar(" + "reader[\"" + dr.Cells[0].Value.ToString() + "\"].ToString()), \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "float")
                        {
                            pc += "(float)Convert.ToDouble(" + "reader[\"" + dr.Cells[0].Value.ToString() + "\"].ToString()), \n";
                        }
                        else
                        {
                            pc += "(" + dr.Cells[1].Value.ToString() + ")" + "reader[\"" + dr.Cells[0].Value.ToString() + "\"], \n";
                        }
                    }
                }

                pc += "Convert.ToChar(reader[\"ActiveStatus\"].ToString()), \n"
                   + "reader[\"InsertedBy\"].ToString(), \n"
                   + "Convert.ToDateTime(reader[\"InsertedOn\"].ToString()) \n"
                   + "); \n"
                   + "return o; \n"
                   + "} \n"
                   + "catch (Exception ex) \n"
                   + "{ \n"
                   + "Utilities.LogError(ex); \n"
                   + "return null; \n"
                   + "} \n"
                   + "} \n";

                pc += "public static List<" + table + "> retrieve(string procName) \n"
                    + "{ \n"
                    + "try \n"
                    + "{ \n"
                    + "List<" + table + "> o = new List<" + table + ">(); \n"
                    + table + "Provider np = new " + table + "Provider(); \n"
                    + "IDataReader reader = np.retrieve(procName); \n"
                    + "while (reader.Read()) \n"
                    + "{ \n"
                    + "o.Add(GetFromReader(reader)); \n"
                    + "} \n"
                    + "reader.Close(); \n"
                    + "reader.Dispose(); \n"
                    + "return o; \n"
                    + "} \n"
                    + "catch (Exception ex) \n"
                    + "{ \n"
                    + "Utilities.LogError(ex); \n"
                    + "return null; \n"
                    + "} \n"
                    + "} \n";


                pc += "public static " + table + " retrieve(string procName, int id) \n"
                    + "{ \n"
                    + "try \n"
                    + "{ \n"
                    + table + " o = new " + table + "(); \n"
                    + table + "Provider np = new " + table + "Provider(); \n"
                    + "IDataReader reader = np.retrieve(procName, id, 'N'); \n"
                    + "while (reader.Read()) \n"
                    + "{ \n"
                    + "o = GetFromReader(reader); \n"
                    + "} \n"
                    + "reader.Close(); \n"
                    + "reader.Dispose(); \n"
                    + "return o; \n"
                    + "} \n"
                    + "catch (Exception ex) \n"
                    + "{ \n"
                    + "Utilities.LogError(ex); \n"
                    + "return null; \n"
                    + "} \n"
                    + "} \n";


                pc += "public static List<" + table + "> retrieve(string procName, int id, char status) \n"
                    + "{ \n"
                    + "try \n"
                    + "{ \n"
                    + "List<" + table + "> o = new List<" + table + ">(); \n"
                    + table + "Provider np = new " + table + "Provider(); \n"
                    + "IDataReader reader = np.retrieve(procName, id, status); \n"
                    + "while (reader.Read()) \n"
                    + "{ \n"
                    + "o.Add(GetFromReader(reader)); \n"
                    + "} \n"
                    + "reader.Close(); \n"
                    + "reader.Dispose(); \n"
                    + "return o; \n"
                    + "} \n"
                    + "catch (Exception ex) \n"
                    + "{ \n"
                    + "Utilities.LogError(ex); \n"
                    + "return null; \n"
                    + "} \n"
                    + "} \n";


                pc += " \n\n #endregion \n \n }";

                this.provider.createFile(project + "\\App_Code\\BLL\\Manager\\", table + "Manager.cs", pc);

                return true;
            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message += "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }


        public bool createAdminViewPage(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = ""
                    + "<%@ Page Language=\"C#\" MasterPageFile=\"~/Admin/AdminMasterPage.master\" AutoEventWireup=\"true\""
                    + "CodeFile=\"AdminView" + table + ".aspx.cs\" Inherits=\"Admin_AdminView" + table + "\"  %>"
                    + "\n\n\n"
                    + "<asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"Server\"> \n"
                    + "<div> \n"
                    + "<asp:Button ID=\"btnAdd\" runat=\"server\" Text=\"Add New\" CssClass=\"save\" OnClick=\"btnAdd_Click\" /> \n <br/> \n"
                    + "</div> \n"
                    + "<div> \n"
                    + "<asp:GridView ID=\"GridView" + table + "\" runat=\"server\" OnRowCommand=\"GridView" + table + "_RowCommand\"\n"
                    + "DataKeyNames=\"ID\" AutoGenerateColumns=\"False\" AllowPaging=\"True\" Width=\"100%\"\n"
                    + "BackColor=\"White\" BorderColor=\"#CC9966\" BorderStyle=\"None\" BorderWidth=\"1px\"\n"
                    + "CellPadding=\"4\" GridLines=\"Horizontal\" onpageindexchanged=\"GridView" + table + "_PageIndexChanged\"\n"
                    + "onpageindexchanging=\"GridView" + table + "_PageIndexChanging\" PageSize=\"5\"> \n"
                    + "<RowStyle BackColor=\"White\" ForeColor=\"#330099\" HorizontalAlign=\"Center\" /> \n"
                    + "<Columns> \n"
                    + "<asp:ButtonField CommandName=\"change\" Text=\"Edit\" ButtonType=\"Button\"> \n"
                    + "<ItemStyle Width=\"70px\" BackColor=\"White\" /> \n"
                    + "</asp:ButtonField> \n"
                    + "<asp:BoundField DataField=\"ID\" HeaderText=\"ID\"> \n"
                    + "<ItemStyle Width=\"50px\" BackColor=\"White\" /> \n"
                    + "</asp:BoundField> \n"
                    + "<asp:TemplateField HeaderText=\"Title\"> \n"
                    + "<ItemTemplate> \n"
                    + "    <asp:Label ID=\"lbltitle\" runat=\"server\" Text='<%#Eval(\"Name\") %>'></asp:Label> \n"
                    + "</ItemTemplate> \n"
                    + "<ItemStyle Width=\"150px\" BackColor=\"White\"  /> \n"
                    + "</asp:TemplateField> \n"
                    + "<asp:ButtonField ButtonType=\"Button\" CommandName=\"vacant\" Text=\"Delete\"> \n"
                    + "<ItemStyle HorizontalAlign=\"Center\" Width=\"60px\" /> \n"
                    + "</asp:ButtonField> \n"
                    + "</Columns> \n"
                    + "<FooterStyle BackColor=\"#FFFFCC\" ForeColor=\"#330099\" /> \n"
                    + "<PagerStyle BackColor=\"#FFFFCC\" ForeColor=\"#330099\" HorizontalAlign=\"Center\" /> \n"
                    + "<EmptyDataTemplate> \n"
                    + "Sorry, No Results Found. \n"
                    + "</EmptyDataTemplate> \n"
                    + "<SelectedRowStyle BackColor=\"#FFCC66\" Font-Bold=\"True\" ForeColor=\"#663399\" /> \n"
                    + "<HeaderStyle BackColor=\"#990000\" Font-Bold=\"True\" ForeColor=\"#FFFFCC\" HorizontalAlign=\"Center\" Height=\"30px\" /> \n"
                    + "</asp:GridView> \n"
                    + "<i>You are viewing page </i> \n"
                    + "<%=GridView" + table + ".PageIndex + 1%> \n"
                    + "<i>of</i> \n"
                    + "<%=GridView" + table + ".PageCount%> \n"
                    + "<br /> \n"
                    + "<br /> \n"
                    + "</div> \n"
                    + "</asp:Content> \n";


                this.provider.createFile(project + "\\Admin\\", "AdminView" + table + ".aspx", pc);

                return true;

            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message += "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }

        public bool createAdminViewCodeBehindPage(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = namespaces
                     + "\n\n"
                        + "/************************************************************************************\n"
                        + "* Code Behind Class : Admin_AdminView" + table + " \n"
                        + "* Author: Abdullah Al-Muzahid, Agradut IT        \n"
                        + "* Generated On: " + DateTime.Now.ToString() + " \n"
                        + "* Generated By: Agradut Code Generator (V 1.0.0.0)\n"
                        + "* Description:	This calss is automatically generated by Code Gnerator\n"
                        + "* It is used to view the data of " + table + " table by Admin \n"
                        + "* **********************************************************************************/\n"
                        + "\n\n\n"
                        + "public partial class Admin_AdminView" + table + " : System.Web.UI.Page"
                        + "{ \n"
                        + "protected void Page_Load(object sender, EventArgs e) \n"
                        + "{ \n"
                        + "if (!Page.IsPostBack) \n"
                        + "{ \n"
                        + "ViewDetails(); \n"
                        + "} \n"
                        + "} \n\n"
                        + "private void ViewDetails() \n"
                        + "{ \n"
                        + "try \n"
                        + "{ \n"
                        + "List<" + table + "> o = new List<" + table + ">(); \n"
                        + "o = " + table + "Manager.retrieve(\"[dbo].[Proc_Retrieve_" + table + "]\",0,'N'); \n"
                        + "GridView" + table + ".DataSource =  o; \n"
                        + "GridView" + table + ".DataBind();"
                        + "} \n"
                        + exceptionbody
                        + "} \n\n"
                        + "protected void GridView" + table + "_RowCommand(object sender, GridViewCommandEventArgs e)"
                        + "{ \n"
                        + "try \n"
                        + "{ \n"
                        + "int index = Convert.ToInt32(e.CommandArgument); \n"
                        + "GridViewRow gvRow =  GridView" + table + ".Rows[index]; \n"
                        + "if (e.CommandName == \"change\")"
                        + "{ \n"
                        + "Response.Redirect(\"AdminInsertUpdate" + table + ".aspx?ID=\" + Convert.ToInt32(gvRow.Cells[1].Text), false); \n"
                        + "} \n"
                        + "else if (e.CommandName == \"vacant\") \n"
                        + "{ \n"
                        + "CommonEntityManager.delete(Convert.ToInt32(gvRow.Cells[1].Text), \"[dbo].[Proc_Delete_" + table + "]\"); \n"
                        + "ViewDetails(); \n"
                        + "} \n"
                        + "} \n"
                        + exceptionbody
                        + "} \n"
                        + "// Add New \n"
                        + "protected void btnAdd_Click(object sender, EventArgs e) \n"
                        + "{ \n"
                        + "Response.Redirect(\"AdminInsertUpdate" + table + ".aspx\",false); \n"
                        + "} \n"
                        + "//Paging \n"
                        + "protected void GridView" + table + "_PageIndexChanging(object sender, GridViewPageEventArgs e) \n"
                        + "{ \n"
                        + "GridView" + table + ".PageIndex = e.NewPageIndex; \n"
                        + "} \n"
                        + "protected void GridView" + table + "_PageIndexChanged(object sender, EventArgs e) \n"
                        + "{ \n"
                        + "ViewDetails(); \n"
                        + "} \n"
                        + "///// \n"
                        + "} \n";

                this.provider.createFile(project + "\\Admin\\", "AdminView" + table + ".aspx.cs", pc);

                return true;
            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message = "\n\n" + Ex.Message + "\n\n";
                return false;
            }

        }


        public bool createAdminInsertUpdatePage(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = ""
                    + "<%@ Page Language=\"C#\" MasterPageFile=\"~/Admin/AdminMasterPage.master\" AutoEventWireup=\"true\" \n"
                    + "CodeFile=\"AdminInsertUpdate" + table + ".aspx.cs\" Inherits=\"Admin_AdminInsertUpdate" + table + "\" %> \n\n\n"
                    + "<asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"Server\"> \n"
                    + "<div class=\"mainForm\"> \n"
                    + "<div> </div>\n"
                    + "<div class=\"labelBox\"> \n"
                    + "<asp:Label ID=\"lblTitle\" runat=\"server\" Text=\"Title : \"></asp:Label></div> \n"
                    + "<div style=\"width:90%; height:25px;\"> \n"
                    + "<asp:TextBox ID=\"txtTitle\" runat=\"server\" TabIndex=\"1\" CausesValidation=\"True\"></asp:TextBox></div> \n"
                    + "<div class=\"validation\"> \n"
                    + "<asp:RequiredFieldValidator ID=\"RequiredFieldValidatorTitle\" runat=\"server\" \n"
                    + "ControlToValidate=\"txtTitle\" ErrorMessage=\"Enter Title\">*</asp:RequiredFieldValidator> \n"
                    + "</div> \n"
                    + "<div class=\"clear\"></div> \n";



                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;
                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        //pc += "reader[\"" + dr.Cells[0].Value.ToString() + "\"].ToString(), \n";  
                        pc += "<div class=\"labelBox\"> \n"
                            + "<asp:Label ID=\"lbl" + dr.Cells[0].Value.ToString() + "\" runat=\"server\" Text=\"" + dr.Cells[0].Value.ToString() + " : \"></asp:Label></div> \n"
                            + "<div class=\"input\"> \n"
                            + "<asp:TextBox ID=\"txt" + dr.Cells[0].Value.ToString() + "\" runat=\"server\" CausesValidation=\"True\"></asp:TextBox> \n"
                            + "</div> \n"
                            + "<div class=\"validation\"> \n"
                            + "</div> \n"
                            + "<div class=\"clear\"></div> \n";
                    }
                }

                pc += "<div class=\"labelBox\"> \n"
                    + "</div> \n"
                    + "<div class=\"input\"> \n"
                    + "<asp:CheckBox ID=\"chkActive\" runat=\"server\" Text=\"Active\" /> \n"
                    + "</div> \n"
                    + "<div class=\"validation\"> \n"
                    + "</div> \n"
                    + "<div class=\"clear\"> \n"
                    + "</div> \n"
                    + "<div class=\"labelBox\"> \n"
                    + "</div> \n"
                    + "<div class=\"input\"> \n"
                    + "<asp:Button ID=\"btnSave\" runat=\"server\" Text=\"Save\" TabIndex=\"11\" OnClick=\"btnSave_Click\" /> \n"
                    //+ "<asp:Button ID=\"btnClear\" runat=\"server\" Text=\"Clear\" TabIndex=\"12\" CausesValidation=\"False\" OnClick=\"btnClear_Click\" /> \n"
                    + "<asp:Button ID=\"btnBack\" runat=\"server\" Text=\"<< Back\" CausesValidation=\"False\" OnClick=\"btnBack_Click\" /> \n"
                    + "</div> \n"
                    + "<div class=\"validation\"> \n"
                    + "</div> \n"
                    + "<div class=\"clear\"></div> \n"
                    + "<div class=\"labelBox\"> \n"
                    + "</div> \n"
                    + "<div class=\"input\"> \n"
                    + "<asp:Label ID=\"lblMessage\" runat=\"server\" ForeColor=\"red\"></asp:Label> \n"
                    + "<br /> \n"
                    + "<asp:ValidationSummary ID=\"ValidationSummary1\" runat=\"server\" /> \n"
                    + "</div> \n"
                    + "</div> \n"
                    + "</asp:Content> \n";


                this.provider.createFile(project + "\\Admin\\", "AdminInsertUpdate" + table + ".aspx", pc);


                return true;
            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message = "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }

        public bool createAdminInsertUpdateCodeBehind(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = namespaces
                    + "\n\n"
                        + "/************************************************************************************\n"
                        + "* Code Behind Class : AdminInsertUpdate" + table + " \n"
                        + "* Author: Abdullah Al-Muzahid, Agradut IT        \n"
                        + "* Generated On: " + DateTime.Now.ToString() + " \n"
                        + "* Generated By: Agradut Code Generator (V 1.0.0.0)\n"
                        + "* Description:	This calss is automatically generated by Code Gnerator\n"
                        + "* It is used to insert update data into " + table + " table by Admin \n"
                        + "* **********************************************************************************/\n"
                        + "\n\n\n"
                        + "public partial class Admin_AdminInsertUpdate" + table + " : System.Web.UI.Page \n"
                        + "{ \n"
                        + "private int id; \n\n"
                        + "protected void Page_Load(object sender, EventArgs e) \n"
                        + "{ \n"
                        + "if(Request.QueryString[\"ID\"]!=null) \n"
                        + "{ \n"
                        + "id = Convert.ToInt32(Request.QueryString[\"ID\"]); \n"
                        + "} \n\n"
                        + "if (!Page.IsPostBack) \n"
                        + "{ \n"
                        + "if (id > 0) \n"
                        + "{ \n"
                        + "ShowDetails(); \n"
                        + "} \n"
                        + "} \n"
                        + "} \n\n\n"
                        + "protected void btnSave_Click(object sender, EventArgs e) \n"
                        + "{ \n"
                        + "try \n"
                        + "{ \n"
                        + table + " o = new " + table + " (); \n\n"
                        + "o.ID = id; \n"
                        + "o.Name = txtTitle.Text.Trim(); \n";


                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;
                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        if (dr.Cells[1].Value.ToString() == "varchar" || dr.Cells[1].Value.ToString() == "nvarchar" || dr.Cells[1].Value.ToString() == "ntext")
                        {
                            pc += "o." + dr.Cells[0].Value.ToString() + " = txt" + dr.Cells[0].Value.ToString() + ".Text.Trim(); \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "int")
                        {
                            pc += "o." + dr.Cells[0].Value.ToString() + " = Convert.ToInt32(txt" + dr.Cells[0].Value.ToString() + ".Text.Trim()); \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "DateTime")
                        {
                            pc += "o." + dr.Cells[0].Value.ToString() + " = Convert.ToDateTime(txt" + dr.Cells[0].Value.ToString() + ".Text.Trim()); \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "float")
                        {
                            pc += "o." + dr.Cells[0].Value.ToString() + " = (float)Convert.ToDouble(txt" + dr.Cells[0].Value.ToString() + ".Text.Trim()); \n";
                        }
                        else if (dr.Cells[1].Value.ToString() == "char")
                        {
                            pc += "o." + dr.Cells[0].Value.ToString() + " = Convert.ToChar(txt" + dr.Cells[0].Value.ToString() + ".Text.Trim()); \n";
                        }
                        else
                        {
                            pc += "o." + dr.Cells[0].Value.ToString() + " = txt" + dr.Cells[0].Value.ToString() + ".Text.Trim(); \n";
                        }

                    }
                }

                pc += "o.ActiveStatus = chkActive.Checked == true ? 'A' : 'I'; \n"
                    + "o.InsertedBy = User.Identity.Name; \n"
                    + "int inid = " + table + "Manager.save(o); \n"
                    + "if (inid > 0) \n"
                    + "{ \n"
                    + "Response.Redirect(\"AdminView" + table + ".aspx\", false); \n"
                    + "} \n"
                    + "else \n"
                    + "{ \n"
                    + "lblMessage.Text = \"An error occured during the operation! Please, refresh the page and try again.\"; \n"
                    + "} \n"
                    + "} \n"
                    + exceptionbody
                    + "\n} \n\n\n"
                    + "private void ShowDetails() \n"
                    + "{ \n"
                    + "try \n"
                    + "{ \n"
                    + table + " o = new " + table + "(); \n"
                    + "o = " + table + "Manager.retrieve(\"Proc_Retrieve_" + table + "\", id); \n"
                    + "if (o != null) \n"
                    + "{ \n"
                    + "id = o.ID; \n"
                    + "txtTitle.Text = o.Name; \n";


                foreach (DataGridViewRow dr in grdColumns.Rows)
                {
                    if (dr.Cells[0].Value != null && dr.Cells[1].Value != null)
                    {
                        //Ignoring the attibutes which are defined as ID
                        string idCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (idCol.Equals("id") || idCol.Equals(table.Trim().ToLower() + "id"))
                            continue;
                        string nameCol = dr.Cells[0].Value.ToString().Trim().ToLower();
                        if (nameCol.Equals("name") || idCol.Equals(table.Trim().ToLower() + "name"))
                            continue;

                        pc += "txt" + dr.Cells[0].Value.ToString() + ".Text = o." + dr.Cells[0].Value.ToString() + ".ToString(); \n";
                    }
                }


                pc += "if (o.ActiveStatus == 'A') \n"
                    + "chkActive.Checked = true; \n"
                    + "else \n"
                    + "chkActive.Checked = false; \n"
                    + "} \n"
                    + "} \n"
                    + exceptionbody
                    + "\n}\n"
                    + "// Back to AdminView page \n"
                    + "protected void btnBack_Click(object sender, EventArgs e) \n"
                    + "{ \n"
                    + "Response.Redirect(\"AdminView" + table + ".aspx\",false); \n"
                    + "} \n"
                    + "} \n";


                this.provider.createFile(project + "\\Admin\\", "AdminInsertUpdate" + table + ".aspx.cs", pc);

                return true;
            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message = "\n\n" + Ex.Message + "\n\n";
                return false;
            }

        }


        public bool createViewPage(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = "<%@ Page Language=\"C#\" AutoEventWireup=\"true\" MasterPageFile=\"~/MainMasterPage.master\" \n"
                         + "CodeFile=\"View" + table + ".aspx.cs\" Inherits=\"View" + table + "\"%> \n"
                         + "<asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"Server\"> \n"
                         + "<asp:HiddenField ID=\"hdfID\" runat=\"server\" /> \n"
                         + "<asp:Repeater ID=\"rptrContent\" runat=\"server\"> \n"
                         + "<ItemTemplate> \n"
                         + "<div> \n"
                         + "<div> \n"
                         + "<%# Eval(\"Name\") %> \n </div> \n"
                         + "</div> \n"
                         + "<div> \n"
                         + "<div> \n"
                         + "<asp:Label ID=\"lblDescription\" Text='<%# Eval(\"Details\") %>' runat=\"server\"></asp:Label> \n"
                         + "</div> \n"
                         + "</div> \n"
                         + "</ItemTemplate> \n"
                         + "</asp:Repeater> \n"
                         + "<div class=\"clear\"> \n"
                         + "</div> \n"
                         + "</asp:Content> \n";


                this.provider.createFile(project, "\\View" + table + ".aspx", pc);

                return true;

            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message = "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }



        public bool createViewCodeBehindPage(out string message)
        {
            message = string.Empty;

            try
            {
                string pc = namespaces
                   + "\n\n"
                        + "/************************************************************************************\n"
                        + "* Code Behind Class : View" + table + " \n"
                        + "* Author: Abdullah Al-Muzahid, Agradut IT        \n"
                        + "* Generated On: " + DateTime.Now.ToString() + " \n"
                        + "* Generated By: Agradut Code Generator (V 1.0.0.0)\n"
                        + "* Description:	This calss is automatically generated by Code Gnerator\n"
                        + "* It is used to view the data of " + table + " table by user \n"
                        + "* **********************************************************************************/\n"
                        + "\n\n\n"
                        + "public partial class View" + table + " : System.Web.UI.Page"
                        + "{ \n\n"
                        + "protected void Page_Load(object sender, EventArgs e) \n"
                        + "{ \n"
                        + "ViewDetails();  \n"
                        + "} \n"
                        + "private void ViewDetails() \n"
                        + "{ \n"
                        + "try \n"
                        + "{ \n"
                        + "List<" + table + "> o = new List<" + table + ">(); \n"
                        + "o = " + table + "Manager.retrieve(\"[dbo].[Proc_Retrieve_" + table + "]\", 0, 'A'); \n"
                        + "rptrContent.DataSource = o; \n"
                        + "rptrContent.DataBind(); \n"
                        + "} \n"
                        + exceptionbody + "\n"
                        + "} \n"
                        + "} \n";



                this.provider.createFile(project, "\\View" + table + ".aspx.cs", pc);

                return true;

            }
            catch (Exception Ex)
            {
                ErrorManager errL = new ErrorManager();
                errL.WriteError("", Ex.Message.ToString(), Ex.Source.ToString(), Ex.StackTrace.ToString());
                message += "\n\n" + Ex.Message + "\n\n";
                return false;
            }
        }


        public void Dispose()
        {
            project = null;
            namespaces = null;
            exceptionbody = null;
            provider = null;
            grdColumns = null;
            table = null;
        }

    }
}
